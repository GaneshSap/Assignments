makeCacheMatrix <- function(x=Matrix()){
  
  #set matrix to null
  m_inv <- NULL
  set <- function(y){
    #assing the computed inverse in cache
    x <<-y
    m_inv <<-NULL
  }
  get <- function() x
  #setting the value of invers
  setInv <- function(inv_input) m_inv <<-inv_input
  #getting the value of invers
  getinv <- function() m_inv
  #return the values
  list(set = set, get =get,
       setInv=setInv,
       getinv =getinv)
  
  
}
cacheSolve <- function(x,...){
  #if inverse is computed get the same
  m_inv <- x$getinv()
  if(!is.null(m_inv)){
    message(" Inverse is cached")
    return(m_inv)
  }
  # otherwise get the matrix first and compute inverse
  data <-x$get()
  m_inv <-solve(data,...)
  x$setInv(m_inv)
  m_inv
}
